For mixed curves, use endpoints to find axis to work on. This way it doesn't just go on z.

For nodes that do not have children or properties that they could have,
display small list of these possible items at the bottom of the inspector. Just click on one to add it.
  
  
  loaders.py:
        # from core.models import Part, Tag, Bool, Int, Float, String
      # from core.models import Part_Part, Part_Bool, Part_Int, Part_Float, Part_String
      # from aiodataloader import DataLoader
      # class Parts_By_Parts_Loader(DataLoader):
      #     async def batch_load_fn(self, ids):
      #         parts = {part.id: part for part in Part.objects.filter(id__in=ids)}
      #         return [parts.get(part_id) for part_id in ids]
      from core.models import Part, Tag, Bool, Int, Float, String
      from core.models import Part_Part, Part_Bool, Part_Int, Part_Float, Part_String
      from collections import defaultdict
      from promise import Promise
      from promise.dataloader import DataLoader
      class Float_E_Loader(DataLoader):
          def batch_load_fn(self, ids):
              print('Float_E_Loader!')
              pfs = defaultdict(list)
              for pf in Part_Float.objects.filter(n__id__in=ids).iterator():
                  pfs[pf.n.id].append(pf)
              print(ids)
              print(pfs)
              print([pfs.get(part_id) for part_id in ids])
              return Promise.resolve([pfs.get(part_id) for part_id in ids])
      class PF_By_R_Loader(DataLoader):
          def batch_load_fn(self, ids):
              print('PF_By_R_Loader!')
              pfs = defaultdict(list)
              for pf in Part_Float.objects.filter(r__in=ids).iterator():
                  pfs[pf.r.id].append(pf)
              print(ids)
              print(pfs)
              print([pfs.get(part_id) for part_id in ids])
              return Promise.resolve([pfs.get(part_id) for part_id in ids])
      class PP_By_N_Loader(DataLoader):
          def batch_load_fn(self, ids):
              #print('PP_By_N_Loader!')
              pps = defaultdict(list)

              for pp in Part_Part.objects.filter(n__in=ids).iterator():
                  pps[pp.n.id].append(pp)
              #pps = {pp.n.id: pp for pp in Part_Part.objects.filter(n__id=ids)}

              #print(ids)
              #print(pps)
              #print([pps.get(part_id) for part_id in ids])

              return Promise.resolve([pps.get(part_id) for part_id in ids])
      class Parts_By_Parts_Loader(DataLoader):
          def batch_load_fn(self, id):
              print('loader in action!')
              #parts = defaultdict(list)
              #parts = {part.id: part for part in Part.objects.filter(id__in=ids)}

              #for part in Part.objects.filter(id__in=ids).iterator():
              #    parts[part.id].append(part)

              #parts = {part.id: part for part in Part.objects.filter(id__in=ids)}
              parts = {part.id: part for part in Part.objects.filter(r__id=id)}

              print([parts.get(part_id) for part_id in ids])

              return Promise.resolve([parts.get(part_id) for part_id in ids])


  
  
  
  [
        "react",
        "@apollo/client",
        "js-cookie",
        "react-dom",
        "react-router-dom",
        "three",
        "@react-three/drei",
        "@react-three/fiber",
        "immer",
        "zustand",
        "react-bootstrap",
        "tslib",
        "graphql",
        "ts-invariant",
        "graphql-tag",
        "@wry/equality",
        "zen-observable-ts",
        "symbol-observable",
        "optimism",
        "@wry/context",
        "@wry/trie",
        "scheduler",
        "process",
        "react-router",
        "@remix-run/router",
        "classnames",
        "prop-types-extra"
      ]
  
  "aclh":      "https://esm.sh/@apollo/client/link/http?pin=v115&dev",
  
  "lodash":    "https://esm.sh/lodash/set?pin=v115&dev"
  
  importmap: react-three/fiber and react-three/drei from esm.sh must have the same dependancies or else it double imports three.js
  
  "three":     "https://esm.sh/three@0.151.3?pin=v115&dev", 
  0.150.0 to 0.151.3
  
  <script id='dd' type='application/json'>{
    "core":  "{% static "core/" %}"
    "media": "{% static "media/" %}"
  }</script>
  
  
   const style = getComputedStyle(document.body);
export const dd = {
    ...JSON.parse(document.getElementById('dd').innerHTML),
    theme:{
        primary: style.getPropertyValue('--bs-primary'),
        secondary: style.getPropertyValue('--bs-secondary'),
        success: style.getPropertyValue('--bs-success'),
        info: style.getPropertyValue('--bs-info'),
        warning: style.getPropertyValue('--bs-warning'),
        danger: style.getPropertyValue('--bs-danger'),
        light: style.getPropertyValue('--bs-light'),
        dark: style.getPropertyValue('--bs-dark'),
    },
}
   
   "core/":     "{% static "core" %}/"
   
   <!-- <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css' rel='stylesheet'  -->
        <!-- integrity='sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65' crossorigin='anonymous'> -->
   
   https://esm.sh/@react-three/drei?pin=v106&deps=three@0.150.0&exports=CameraControls,useGLTF&dev
   
   <script id='nav' type='application/json'>{
      "Home": "{% url "core:home" %}",
      "main":[
          {"name":"Catalog",   "url":"{% url "core:catalog" %}"},
          {"name":"Studio",    "url":"{% url "core:studio" %}"}
      ]
  }</script>
   
    {% block content %}{% endblock %}
  
  {% extends "core/base.html" %}
{% load static %}

{% block content %}
  <p>hello world</p>
{% endblock %}
  
  "zustand":   "https://esm.sh/zustand?pin=v106&dev",
  "core/":     "{% static "core" %}/",
      "catalog/":  "{% static "catalog" %}/",
      "easel/":    "{% static "easel" %}/"


 //context.drawImage(texture.image, 0, 0);
		//const data = context.getImageData( 0, 0, canvas.width, canvas.height );
		//console.log( data );
 

//r('primitive', {ref:el=>sprites.current[i]=el, object:node[1], key:i+'s', ...p})
//, position:node[1].position, rotation:node[1].rotation 
// r('bufferGeometry',{attach:'geometry'},
                    // 	r('bufferAttribute',{attach: 'attributes-position', count:node[1].geometry.attributes.position.count, array:node[1].geometry.attributes.position.array, itemSize:3}),
					// 	r('bufferAttribute',{attach: 'attributes-uv', count:node[1].geometry.attributes.uv.count, array:node[1].geometry.attributes.uv.array, itemSize:2}),
					// 	r('bufferAttribute',{attach: 'attributes-normal', count:node[1].geometry.attributes.normal.count, array:node[1].geometry.attributes.normal.array, itemSize:3}),
					// ), 
//r('mesh', {castShadow:true, receiveShadow:true, geometry:nodes.Scene.children[0].geometry, material:new MeshLineMaterial({color: new Color('hsl(0,0%,40%)')})}),
			//r('mesh', {castShadow:true, receiveShadow:true, geometry:nodes[1].geometry, material:new MeshLineMaterial({color: new THREE.Color('hsl(0,0%,40%)')})}),
			//<mesh castShadow receiveShadow geometry={nodes.Curve007_2.geometry} material={materials['Material.002']} />

  "zustand":   "https://esm.sh/zustand?dev", 
      "nanoid":    "https://esm.sh/nanoid",

{{ product.data | json_script:"product" }}
<script type="module" src="{% static 'easel/init.js' %}"></script>


<nav class="navbar navbar-expand-lg bg-white">
    <div class="container-fluid ps-4 pe-4">
      <a class="navbar-brand" href="{% url 'core:index' %}">delimit</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-3 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link {% if 'catalog' in request.path %}active{% endif %}" href="{% url 'catalog:list' %}">Catalog</a>
          </li>
          <li class="nav-item">
            <a class="nav-link {% if 'easel' in request.path %}active{% endif %}" href="{% url 'easel:list' %}">Easel</a>
          </li>
        </ul>
        <form class="d-flex" role="search">
          <input class="form-control me-2 mb-3 mb-lg-0" type="search" placeholder="Search" aria-label="Search">
        </form>
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link {% if 'core' in request.path %}active{% endif %}" href="{% url 'core:index' %}">Account</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>


  <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script> -->
  <!-- <script src="https://code.jquery.com/jquery-3.6.1.js" integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI=" crossorigin="anonymous"></script> -->
  <!-- <script defer src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script> -->
  <!-- <script defer src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script> -->
  <!-- <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script> -->
  <!-- <script src="https://unpkg.com/es-module-shims@1.6.2/dist/es-module-shims.js" integrity="sha384-c/pn4DO64tclkSByrSvpbhFkgzFvbFjMJnPW2CpHNGWgpU9r9P+qbOQTh/ZVAchn" crossorigin="anonymous"></script> -->

  <h1>home page so cool</h1>
  <p>Welcome to home page, a website developed by <em>Delimit</em>!</p>
  <h2>Dynamic content</h2>
  <p>Record counts:</p>
  <ul>
    <li><strong>core.models.Products:</strong> {{ num_products }}</li>
  </ul>

  <script id='nav' type='application/json'>{[
      {name:'Home',     url:'{% url 'core:index' %}'},
      {name:'Catalog',  url:'{% url 'catalog:list' %}'},
      {name:'Easel',    url:'{% url 'easel:list' %}'},
  ]}</script>